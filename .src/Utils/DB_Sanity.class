' Gambas class file

Private DB_Con As DB_Connection

Private Data As String[][]
Private Data_Expected As String[][]
Private Valid As Integer[][]

Private Datain As String[][]
Private Found As Boolean[]


Public Sub _new(dbconnection As DB_Connection)
  
  DB_Con = dbconnection

  GridView1.Header = GridView.Both
  GridView1.ScrollBar = Scroll.Both
  GridView1.Columns.Count = 9
  GridView1.Columns[0].Text = "Table"
  GridView1.Columns[0].Width = 180
  GridView1.Columns[1].Text = "Format"
  GridView1.Columns[1].Width = 100
  GridView1.Columns[2].Text = "Champ"
  GridView1.Columns[2].Width = 180
  GridView1.Columns[3].Text = "Type"
  GridView1.Columns[3].Width = 100
  GridView1.Columns[4].Text = "Long."
  GridView1.Columns[4].Width = 50
  GridView1.Columns[5].Text = "Def."
  GridView1.Columns[5].Width = 50
  GridView1.Columns[6].Text = "collation"
  GridView1.Columns[6].Width = 150
  GridView1.Columns[7].Text = "Prim."
  GridView1.Columns[7].Width = 50
  GridView1.Columns[8].Text = "Valid"
  GridView1.Columns[8].Width = 50
  
End

Public Sub Refresh()
  
  Refresh_Data()
  
End

Public Sub Refresh_Data(Optional csvin As String = "", Optional csvout As String = "")

  Dim $sLine As String
  Dim $curline As String[]
  Dim $expline As String[]
  Dim $valid As Integer[]
  Dim $primary As String[]
  Dim $elem As String[]
  Dim $i As Integer = 0
  Dim $j As Integer = 0
  Dim $k As Integer = 0
  Dim $user As Variant
  Dim $table As Table
  Dim $field As Field
  Dim $hfileout As File
  Dim $hfilein As File
  Dim $found As Boolean
  
  GridView1.Clear()
  
  Data = New String[][]
  Data_Expected = New String[][]
  Valid = New Integer[][]

  If csvout Then
    $hFileout = Open csvout For Write Create
  Endif
  If csvin Then
    Datain = New String[][]
    Found = New Boolean[]
    $hFilein = Open csvin For Input
    While Not Eof($hFilein)
      Line Input #$hFilein, $sLine
      $curline = Split($sLine, ";")
      Datain.Add($curline)
      Found.Add(False)
    Wend
  Endif
  
  For Each $table In DB_Con.Tables
    $primary = $table.PrimaryKey
    For Each $field In $table.Fields
      $curline = New String[]
      $curline.Add($table.Name) '#0
      $curline.Add($table.type) '#1
      $curline.Add($field.Name) '#2
      $curline.Add($field.type) '#3
      $curline.Add($field.Length) '#4
      $curline.Add($field.Default) '#5
      $curline.Add($field.Collation) '#6
      If $primary.Exist($field.Name) Then
        $curline.Add("*") '#7
      Else
        $curline.Add("") '#7
      Endif

      'Valid Flag
      $curline.Add("?") '#8
      $valid = [-1, -1, -1, -1, -1, -1, -1, -1, -1]
      $expline = New String[]
      $expline = $curline.Copy()
      
      If Not IsNull(Datain) Then
        $j = 0
        $found = False
        For Each $elem In Datain
          'On recherche dans les données de référence
          If $table.Name = $elem[0] Then
            If $field.Name = $elem[2] Then
              Found[$j] = True
              $found = True
              $k = 0
              'on verifie tous les champs
              While $k < 9
                If $curline[$k] = $elem[$k] Or $elem[$k] = "?" Then
                  $valid[$k] = 1
                Else
                  $valid[$k] = 0
                  $expline[$k] = $elem[$k]
                Endif
                $k = $k + 1
              Wend
            Endif
          Endif
          
          $j = $j + 1
        Next

        If $found = False And Controlled.Value = True Then
          Continue
        Else If $found = True And Supplem.Value = True Then
          Continue
        Endif
      Endif

      Data.Add($curline)
      Data_Expected.Add($expline)
      Valid.Add($valid)

      If csvout Then
        Print #$hfileout, $curline.Join(";")
      Endif
      $i = $i + 1
    Next
  Next

  If csvout Then
    Close #$hfileout
    Message.Info("Export fait au format CSV dans le fichier :\n" & csvout)
  Endif
  If csvin Then
    Close #$hfilein
  Endif
  
  If $i <> 0 Then
    GridView1.rows.count = $i
    GridView1.MoveTo(0, 0)
    GridView1.SetFocus 
    GridView1.Refresh
  Else
    GridView1.rows.count = 0
    GridView1.MoveTo(0, 0)
    GridView1.Refresh
  Endif
  
  
End

Public Sub Refresh_Data_Missing() As Boolean

  Dim elem As String[]
  Dim $i As Integer = 0
  Dim $j As Integer = 0
  
  GridView1.Clear()

  Data = New String[][]
  Data_Expected = New String[][]
  Valid = New Integer[]
  If Not IsNull(Datain) Then
    For Each elem In Datain
      If Found[$j] = False Then
        Data.Add(elem)
        Data_Expected.Add(elem)
        Valid.Add([2, 2, 2, 2, 2, 2, 2, 2, 2])
        $i = $i + 1
      Endif
      $j = $j + 1
    Next
    If $i <> 0 Then
      GridView1.rows.count = $i
      GridView1.MoveTo(0, 0)
      GridView1.SetFocus 
      GridView1.Refresh
    Else
      GridView1.rows.count = 0
      GridView1.MoveTo(0, 0)
      GridView1.Refresh
    Endif
    Return False
  Else
  
    GridView1.rows.count = 0
    GridView1.MoveTo(0, 0)
    GridView1.Refresh
    Return True
  Endif

End



Public Sub Form_Open()

  Refresh()

End

Public Sub GridView1_Data(Row As Integer, Column As Integer)

  If Valid[Row][Column] = 1 Then
    If Not IsNull(Datain) Then
      If Column = 8 Then
        Data[Row][Column] = "OK"
      Endif
      GridView1.data.Background = Color.Green
    Endif
  Else If Valid[Row][Column] = 0 Then
    If Not IsNull(Datain) Then
      If Column = 8 Then
        Data[Row][Column] = "ERR"
      Endif
      GridView1.data.Background = Color.Red
    Endif
  Else If Valid[Row][Column] = 2 Then
    If Not IsNull(Datain) Then
      If Column = 8 Then
        Data[Row][Column] = "ABS"
      Endif
      GridView1.data.Background = Color.Pink
    Endif
  Else
    If Not IsNull(Datain) Then
      If Column = 8 Then
        Data[Row][Column] = "SUP"
      Endif
      GridView1.data.Background = Color.Orange
    Else
      If Column = 8 Then
        Data[Row][Column] = "?"
      Endif
    Endif
  Endif

  If Expected.Value Then
    GridView1.data.Text = Data_Expected[Row][Column]
  Else
    GridView1.data.Text = Data[Row][Column]
  Endif

End


Public Sub Quitter_Click()

  Me.Close

End

Public Sub Export_CSV_Click()

  Me.mouse = mouse.Wait
  If Not Exist(User.home & "/tmp") Then Mkdir User.home & "/tmp"
  Refresh_Data(Null, User.Home & "/tmp/db_control.csv")
  Me.mouse = mouse.Default

End

Public Sub Control_Click()

  Me.mouse = mouse.Wait
  Refresh_Data("db_control.csv", Null)
  Me.mouse = mouse.Default

End

Public Sub AllTab_Click()

  Control_Click()

End

Public Sub Controlled_Click()

  Control_Click()

End

Public Sub Supplem_Click()

  Control_Click()

End

Public Sub Missing_Click()

  If Refresh_Data_Missing() Then
    Control_Click()
    Refresh_Data_Missing()
  Endif

End

Public Sub Expected_Click()

  GridView1.Refresh

End

Public Sub Nettoyer_Click()

  If IsNull(Datain) Then
    Message.Error("Vous devez d'abord lancer un contrôle, pour faire cette opération!")
    Return
  Endif
  If Message.Warning("Toutes les tables et champs inutilisés par Laurux vont être supprimés!\nUne sauvegarde préalable est conseillé!", "Annuler", "Nettoyer") = 1 Then Return

  Message.Info("Non implementé")

End

Public Sub Corriger_Click()

  If IsNull(Datain) Then
    Message.Error("Vous devez d'abord lancer un contrôle ou une recherche de champ absent, pour faire cette opération!")
    Return
  Endif
  If Message.Warning("Une tentative de correction de la base de donnée va être tenté!\nUne sauvegarde préalable est indispensable!", "Annuler", "Corriger") = 1 Then Return

  Message.Info("Non implementé")

End
