' Gambas class file

Create Static

Public Enum Clients, Fournisseurs, Comptabilite, Autres, Articles

Private $index As Integer
Private $tags As Collection
Private $type As Integer
Private $code As String
Private $url As String
Private $filename As String
Private $mime As String
Private $origin As String
Private $mht As LPrix
Private $mttc As LPrix
Private $dte As LDate
Private $mimeout As String
Private $temp_file As String
Private $temp_extension As String

Public Bsel As Boolean = False
Public Bval As String = ""

Property TTC As LPrix
Property HT As LPrix
Property DTE As LDate


Public Sub _New(Optional lind As Integer = 0, Optional type As Integer = Autres, Optional origin As String = "", Optional code As String = "")
  
  Dim Res, Res2 As Result
  
  'Creation for Static Class Call
  $index = lind
  $type = type
  $origin = origin
  $temp_file = Null
  $temp_extension = Null
  $tags = New Collection
  $code = code
  $dte = LDate()
  $mht = LPrix(0)
  $mttc = LPrix(0)

  
  'Creation d'un object LGed
  If $index <> 0 Then  
    Res = Utils.db.Exec("Select * From Docs_Ged where lind = &1", $index)
    If Res.Available Then
      Res2 = Utils.db.Exec("Select * From Docs_Tag left join Fiches_Tag on tag_lind = lind where doc_lind = &1", $index)
      If Res2.Available Then
        Repeat
          $tags.Add(Res2!tag, Res2!lind)
        Until Res2.MoveNext()
      Endif
      $type = Res!type
      $code = Res!code
      $url = Res!url
      $filename = Res!filename
      $mime = Res!mime
      $origin = Res!origin
      $dte = New LDate(Res!date)
      $mht = New LPrix(Res!ht)
      $mttc = New LPrix(Res!ttc)
    Endif
  Endif
  
End

Public Sub Search(code As String, Optional type As Integer = Autres) As LGed
  
  Dim Res As Result
  Dim Ret As LGed
  Res = Utils.db.Exec("Select lind From Docs_Ged where code = &1 and type = &2", code, type)
  If Res.Available Then
    Ret = New LGed(Null, Res!lind)
    Return Ret
  Endif

  Return Null
  
End

Public Sub Supprime(Optional Epur As Boolean = True)
  
  If $index = 0 Then Return

  Utils.db.Exec("delete FROM Docs_Ged where lind = &1", $index)
  Utils.db.Exec("delete FROM Docs_Tag where doc_lind = &1", $index)
  If Epur Then
    EpurationTags()
  Endif
  
End

Public Sub AddTag(Tag As String) As Integer 'return the index of the tag in DB or zero in case of error
  
  Dim Res As Result
  
Tag_exists:

  Res = Utils.db.Exec("select * from Fiches_Tag where tag = &1", Tag)
  If Res.Available Then
    $tags.Add(Tag, Res!lind)
    If $index <> 0 Then
      Utils.db.Exec("insert ignore into Docs_Tag (doc_lind, tag_lind) VALUES (&1, &2)", $index, Res!lind)
    Endif
    Return Res!lind
  Else
    Utils.db.Exec("insert into Fiches_Tag (tag) VALUES (&1)", Tag)
    Goto Tag_exists
  Endif
  
End

Public Sub DelAllTag(Optional Epur As Boolean = True) 'delete all tags of the documents
  
  $tags.Clear
  If $index <> 0 Then
      Utils.db.Exec("delete from Docs_Tag where doc_lind = &1", $index)
  Endif
  If Epur Then
      EpurationTags()
  Endif
  
End
 
Public Sub DelTag(Tag As String, Optional Epur As Boolean = True) As Integer 'return the index of the tag in DB or zero in case of error
  
  Dim Res As Result
  
  Res = Utils.db.Exec("select * from Fiches_Tag where tag = &1", Tag)
  If Res.Available Then
    $tags.Remove(Res!lind)
    'si le document existe dans la base on supprime la référence au tag
    If $index <> 0 Then
      Utils.db.Exec("delete from Docs_Tag where tag_lind = &1 and doc_lind = &2", Res!lind, $index)
    Endif
    If Epur Then
      EpurationTags()
    Endif
    Return Res!lind
  Else
    Return 0
  Endif
  
End


Public Sub EpurationTags() As Integer 'suppression de tous les tags orphelins
  
  Dim Res As Result
  
  Res = Utils.db.Exec("select t.lind as tagidx, doc_lind, tag_lind, d.lind as docidx FROM Fiches_Tag as t left join Docs_Tag on t.lind = tag_lind left join Docs_Ged as d on d.lind = doc_lind where d.lind is null or doc_lind is null or tag_lind is null")
  If Res.Available Then
    Repeat
      Utils.db.Exec("delete FROM Fiches_Tag where lind = &1", Res!tagidx)
    Until Res.MoveNext()
    Return Res.Count
  Else
    Return 0
  Endif
  
End

Public Sub EpurationDocs() As Integer 'suppression des documents sans tag
  
  Dim Res As Result
  
  Res = Utils.db.Exec("Select lind From Docs_Ged left join Docs_Tag On lind = doc_lind where doc_lind Is Null ")
  If Res.Available Then
    Repeat
      Utils.db.Exec("delete FROM Docs_Ged where lind = &1", Res!lind)
    Until Res.MoveNext()
    Return Res.Count
  Else
    Return 0
  Endif
  
End


Public Sub XdgMimeProc_Read()

  Dim sLine As String

  Line Input #Last, sLine
  
  $mimeout = RTrim$(sLine)

End

Public Sub CurlMimeProc_Read()

  Dim sLine As String
  Dim regex As RegExp

  Line Input #Last, sLine
  
  regex = New RegExp
  regex.Compile("Type: ([^;]*).*")
  regex.Exec(sLine)
  If regex.Count >= 1 Then
    $mimeout = RTrim$(regex[1].Text)
  Endif

End

Public Sub Get_Mime(url As String) As String

  Dim path As String
  Dim xdgmime As Process
  Dim mime As String

  $mimeout = "" 

  If Left(url, 8) = "file:///" Or Left(url, 1) = "/" Then
    $filename = File.Name(url)
    If Left(url, 8) = "file:///" Then
      path = Mid(url, 8)
    Else
      path = url
    Endif
    xdgmime = Shell "xdg-mime query filetype " & path Wait For Input As "XdgMimeProc"
    If xdgmime.Value == 0 Then
      If Not IsNull($mimeout) Then
        Return $mimeout
      Endif
    Endif
  Else If Left(url, 7) = "http://" Or Left(url, 8) = "https://" Then
    Try $filename = File.Name(url)
    xdgmime = Shell "timeout 5 curl -s -k -I -o /dev/null -w 'Type: %{content_type}\n' '" & url & "'" Wait For Input As "CurlMimeProc"
    If xdgmime.Value == 0 Then
      If Not IsNull($mimeout) Then
        Return $mimeout
      Endif
    Endif
  Endif

  Return Null

End

Public Sub Get_Default_Extension(Optional Ext As String = "") As String
  
  If $temp_file <> Null And $temp_extension <> Null Then
    'Copie de l'extension du fichier d'origine
    Return $temp_extension
  Else
    'Proposition de l'extension à partir du type mime
    Select Case $mime
      Case "application/pdf"
        Return "pdf"
      Case "text/html"
        Return "html"
      Case "text/plain"
        Return "txt"
      Case "text/csv"
        Return "csv"
      Case "application/msword"
        Return "doc"
      Case "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        Return "docx"
      Case "application/vnd.ms-excel"
        Return "xls"
      Case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        Return "xlsx"
      Case "application/zip"
        Return "zip"
      Case "application/gzip"
        Return "gz"
      Case ""
        'Use pdf as default if no value
        Return "pdf"
      Case Else
        'Sinon utilisation du défault fourni en entrée
        Return Ext
    End Select
  Endif
  
End

Public Sub MoveURL(NewUrl As String) As Boolean
  
  Dim OldUrl As String
  
  OldUrl = $url
  
  If (Left(NewUrl, 8) = "file:///" Or Left(NewUrl, 1) = "/") And (Left(OldUrl, 8) = "file:///" Or Left(OldUrl, 1) = "/") Then

    OldUrl = Replace(OldUrl, "file:///", "/")
    NewUrl = Replace(NewUrl, "file:///", "/")
    
    If OldUrl = NewUrl Then Return False

    If Utils.Mkdir_p(File.Dir(NewUrl)) Then
      Return True
    Endif

    Try Move OldUrl To NewUrl
    If Error Then
      Return True
    Endif
    'change URL only if moving file is successfull
    $url = furl.Text
  Else
    If (Left(NewUrl, 8) = "file:///" Or Left(NewUrl, 1) = "/") Or (Left(OldUrl, 8) = "file:///" Or Left(OldUrl, 1) = "/") Then
      Message.Error("Impossible de transférer le document de \n" & OldUrl & "\nvers\n" & NewUrl & "\nLe transfert doit etre fait manuellement!")
    Endif
    'Just update URL without moving file
    $url = furl.Text
  Endif
  Return False

End

Public Sub Commit()

  Dim Res As Result
  Dim tag As String

  If $index = 0 Then
    Utils.db.Exec("Insert into Docs_Ged (type, code, origin, url, filename, mime, date, ttc, ht) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9)", $type, $code, $origin, $url, $filename, $mime, $dte.DT, $mttc.D, $mht.D)
    Res = Utils.db.Exec("SELECT * FROM Docs_Ged WHERE lind = LAST_INSERT_ID()")
    $index = Res!lind
  Endif

  
  DelAllTag(False) 'l'epuration en edition graphique sera fait à la fermeture de la fenetre
  For Each tag In ListTags.List
    AddTag(tag)
  Next

  Utils.db.Exec("update Docs_Ged set type = &1, code = &2, origin = &3, url = &4, filename = &5, mime = &6, date = &7, ttc = &8, ht = &9 where lind = &{10}", $type, $code, $origin, $url, $filename, $mime, $dte.DT, $mttc.D, $mht.D, $index)
  
End

Public Sub Ouvrir()

  If $url <> Null Then
    Visualiseur.Prog($url, $mime)
  Endif

End


Public Sub Default_URL(Optional FileName As String) As String

  Dim DefFile As String
  Dim Extension As String
  Dim Base As String
  Dim tag As String

  Base = ""

  Select $type
    Case LGed.Clients
      Base &= Start.LocalSettings["/Soc" & Start.Societe & "/Factchemin"]
    Case LGed.Fournisseurs
      Base &= Start.LocalSettings["/Soc" & Start.Societe & "/FactcheminF"]
    Case LGed.Comptabilite
      Base &= Start.LocalSettings["/Soc" & Start.Societe & "/FactcheminC"]
    Case LGed.Articles
      Base &= Start.LocalSettings["/Soc" & Start.Societe & "/FactcheminP"]
    Case LGed.Autres
      Base &= Start.LocalSettings["/Soc" & Start.Societe & "/FactcheminA"]
  End Select

  Base &= "/" & Str$($dte.Year) & "/"

  If $origin = "" Then
    Base &= "/Docs/"
  Else
    Base &= "/" & $origin & "/"
  Endif
  
  Extension = File.Ext(FileName)
  FileName = File.BaseName(FileName)

  If FileName = "" Then
    DefFile = Base & $dte.FT & "_" & Str($code)
    For Each tag In ListTags.List
      If (Len(Base) + Len(DefFile) + Len(Left(tag, 8)) + Len(Extension) + 2) < 255 Then
        DefFile &= "_" & Left(tag, 8)
      Endif
    Next
    DefFile &= "." & Get_Default_Extension()
  Else
    DefFile = Base & FileName & "." & Extension
  Endif
  
  DefFile = Replace(DefFile, "//", "/")
  
  Return "file://" & DefFile

End

'********
'PROPERTY
'********

Sub TTC_Read() As LPrix
  Return $mttc
End

Sub TTC_Write(ttc As LPrix)
  $mttc = ttc
End

Sub HT_Read() As LPrix
  Return $mht
End

Sub HT_Write(ht As LPrix)
  $mht = ht
End

Sub DTE_Read() As LDate
  Return $dte
End

Sub DTE_Write(dte As LDate)
  $dte = dte
End

''''''''''''''''
'Graphic methods

Public Sub form_Open()

  Dim tag As Variant

  'on affiche les valeurs dans le formulaire
  findex.Text = $index
  ftype.Add("Clients", Clients)
  ftype.Add("Fournisseurs", Fournisseurs)
  ftype.Add("Comptabilite", Comptabilite)
  ftype.Add("Autres", Autres)
  ftype.Add("Articles", Articles)
  ftype.Text = ftype[$type].Text
  fcode.Text = $code
  furl.reg = ".*"
  furl.Text = $url
  forigin.Text = $origin
  fdte.Text = $dte.LT
  fdte.Datetime = True
  fMht.Text = $mht.L
  fMht.numerique = True
  fMttc.Text = $mttc.L
  fMttc.numerique = True
  fmime.Text = $mime
  'on autorise la modification de l'origine si elle n'a pas été crée au moment de l'objet (creation manuelle)
  If $origin = "" Then
    forigin.ReadOnly = False
  Endif
  
  Object.Lock(ListTags)
  For Each tag In $tags
    ListTags.Add(tag)
  Next
  Object.Unlock(ListTags)
  
End

Public Sub form_Close()
  
  EpurationTags()
  
End

Public Sub ftype_Change()
  
  $type = ftype.Index
  
End

Public Sub fcode_Change()
  
  $code = fcode.Text
  
End

Public Sub furl_Change()
  
End

Public Sub fMht_Change()
  
  $mht.L = fMht.Text
  
End

Public Sub fMttc_Change()
  
  $mttc.L = fMttc.Text
  
End

Public Sub fmime_Change()
  
  $mime = fmime.Text
  
End

Public Sub forigin_Change()
  
  $origin = forigin.Text
  
End

Public Sub ListTags_Change()
  
End

Public Sub Existant_Click()

  Dim tr As TriGen
  Dim prop As ObjProp
  Dim Col As Collection
  Dim k As String
  Dim Req As String
  Dim Res As Result
  
  Req = "select * from Fiches_Tag"
  Res = Utils.db.Exec(Req)
  If Not Res.Available Then Return
  
  Col = New Collection
  k = "------------- tag --------------"
  prop = New ObjProp(Res.Fields["tag"], k)
  Col.Add(prop, k)
  
  tr = New TriGen(Null, Col, Res, Req, 20, Me)
  'simplify Modal version
  tr.Show(True)
  
  If Bsel = True Then
    ListTags.Add(Bval)
    Bsel = False
    Bval = ""
  Endif

End

Public Sub OuvrirB_Click()

  Ouvrir()

End

Public Sub Supprimer_Click()

  If Message.Question("Voulez-vous confirmer la suppression du document!", "Oui", "Non") = 1 Then
    Supprime(False)
    Me.Close()
  Endif

End

Public Sub Enregistrer_Click()

  Dim Nomfichier As String
  Dim oldfile As String

  If fdte.dte = Null Then
    Message.Error("la date ne doit pas etre vide")
    Return
  Endif

  If fcode.Text = Null Then
    Message.Error("le code ne doit pas etre vide")
    Return
  Endif

  If furl.Text = Null Then
    Message.Warning("Merci de saisir l'url cible, Vous pouvez selectionner celle par défault")
    Return
  Endif

  If $temp_file <> Null And Exist($temp_file)
  
    If Left(furl.Text, 8) = "file:///" Or Left(furl.Text, 1) = "/" Then
    
      Nomfichier = Replace(furl.Text, "file:///", "/")

      If Nomfichier = Null Then
        Message.Error("Merci de saisir le nom du fichier cible!")
        Return
      Endif
    
      If Exist(Nomfichier)
        If Message.Question("Le fichier\n" & furl.Text & "\nexiste déjà, voulez vous le remplacer", "Oui", "Non") = 2 Then Return
        Try Kill Nomfichier
        If Error Then
          Message.Error("Impossible de supprimer le fichier " & Nomfichier)
          Return
        Endif
      Else
        If Utils.Mkdir_p(File.Dir(Nomfichier)) Then
          Message.Error("Impossible de créer le répertoire " & File.Dir(Nomfichier))
          Return
        Endif
      Endif

      If Left($url, 8) = "file:///" Or Left($url, 1) = "/" Then
        oldfile = Replace($url, "file:///", "/")
        If Exist(oldfile)
          Try Kill oldfile
          If Error Then
            Message.Error("Impossible de supprimer " & oldfile & " !")
          Endif
        Endif
      Endif
      Try Copy $temp_file To Nomfichier
      If Error Then
        Message.Error("Impossible de copier " & $temp_file & " vers " & Nomfichier)
      Endif

      Try Kill $temp_file
      $temp_file = Null
      $temp_extension = Null
      $url = furl.Text
    Else
      Message.Error("Le support de Scan/Copie n'est actuellement disponible que sur les URL de fichier locaux (file://, /...)") 
    Endif

  Else

    If $url <> furl.Text Then
      If MoveURL(furl.Text) Then
        Message.Error("impossible de déplacer le document d'URL!")
        furl.Text = $url
      Endif
      $url = furl.Text
    Endif

  Endif
  
  $mime = Get_Mime($url)
  If $mime = Null Then
    Message.Error("impossible de recupérer le type mime, verifiez l'URL")
    fmime.Text = ""
    Return
  Else
    fmime.Text = $mime
  Endif
  

  Commit()
  findex.Text = $index

End

Public Sub Sortir_Click()
  
  If $temp_file <> Null Then
    If Message.Question("Vous avez modifié le document, Voulez vous sortir sans l'enregister ?", "Oui", "Non") = 2 Then Return
    Try Kill $temp_file
  Endif
  Me.Close()

End

Public Sub Scanner_Click()

  If $temp_file <> Null Then 
    Try Kill $temp_file
  Endif
  $temp_file = Temp$()
  Try Kill User.Home & "/" & "multipageproject.pdf"
  Try Utils.Rmdir_rf(user.home & "/multipageproject")
  Try Utils.Mkdir_p(user.home & "/multipageproject")
  Shell "echo Project created@@@@@@@@@@@@@@@@ > " & user.home & "/multipageproject/xsane-multipage-list" Wait
  Shell "echo image0001.pnm  >> " & user.home & "/multipageproject/xsane-multipage-list" Wait
  Exec ["xsane", "-s", "-m"] Wait

  If Exist(User.Home & "/" & "multipageproject.pdf") Then
    Copy User.Home & "/" & "multipageproject.pdf" To $temp_file
    $temp_extension = "pdf"
  Else
    Message.Error("Il y a un problème de Scan. Vérifiez votre appareil SVP.")
    $temp_file = Null
    $temp_extension = Null
    Return
  Endif

  If Exist($temp_file) And If Stat($temp_file).Size <> 0 Then
    If Message.Question("Scan terminé. Voulez-vous voir le document scané ?", "Non", "Oui") = 2 Then Visualiseur.Prog($temp_file)
  Else
    Message.Error("Le fichier " & $temp_file & " Est vide ou innexistant. Vérifiez votre appareil SVP.")
    $temp_file = Null
    $temp_extension = Null
    Return
  Endif
  
  If $mime <> Null Then
    fmime.Text = "application/pdf"
  Endif
  
  If $url <> Null Then
    furl.Text = File.Dir(furl.Text) & "/" & File.BaseName(furl.Text) & ".pdf"
  Endif

End

Public Sub Copier_Click()

  Dim l_hform As LBox
  Dim Nomfichier As String
  Dim Copiefichier As LTrans
  Dim cancel As Boolean
  Dim newmime As String
  
  If $temp_file <> Null Then 
    Try Kill $temp_file
  Endif
  $temp_file = Temp$()
  Copiefichier = New LTrans
  l_hform = New LBox("", Null, Null, Copiefichier, "", LBox.FileSelect)
  cancel = l_hform.ShowModal()
  If (cancel Or (Copiefichier.List = Null)) Then
    Try Kill $temp_file
    $temp_file = Null
    Return
  Else
    If Copiefichier.List.First <> Null And Copiefichier.List.Length = 1 Then
      newmime = Get_Mime(Copiefichier.List.First)
      If newmime <> Null And $mime <> Null And newmime <> $mime Then
        If Message.Question("Le fichier source possède un format d'extension différent du fichier original. Voulez-vous changer pour ce nouveau format ?", "Oui", "Non") = 1 Then
          fmime.Text = newmime
          If furl.Text Then
            furl.Text = File.Dir(furl.Text) & "/" & File.BaseName(furl.Text) & "." & File.Ext(Copiefichier.List.First)
          Endif
        Else
          Try Kill $temp_file
          $temp_file = Null
          Return
        Endif
      Endif
      Copy Copiefichier.List.First To $temp_file
      $temp_extension = File.Ext(Copiefichier.List.First)
    Else
      Message.Error("Plusieurs fichiers ont été sélectionnés!")
      Try Kill $temp_file
      $temp_file = Null
      Return
    Endif
  Endif

End

Public Sub DefUrl_Click()

  furl.Text = Default_URL(furl.Text)

End
